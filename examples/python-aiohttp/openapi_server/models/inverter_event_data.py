# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InverterEventData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appliance_id: str=None, gateway_id: str=None, model: str=None, manufacturer: str=None, type: str=None, kind: str=None, name: str=None, serial_number: str=None, system_id: str=None, system_name: str=None, status: str=None, last_status: str=None, err_code: str=None, last_err_code: str=None):
        """InverterEventData - a model defined in OpenAPI

        :param appliance_id: The appliance_id of this InverterEventData.
        :param gateway_id: The gateway_id of this InverterEventData.
        :param model: The model of this InverterEventData.
        :param manufacturer: The manufacturer of this InverterEventData.
        :param type: The type of this InverterEventData.
        :param kind: The kind of this InverterEventData.
        :param name: The name of this InverterEventData.
        :param serial_number: The serial_number of this InverterEventData.
        :param system_id: The system_id of this InverterEventData.
        :param system_name: The system_name of this InverterEventData.
        :param status: The status of this InverterEventData.
        :param last_status: The last_status of this InverterEventData.
        :param err_code: The err_code of this InverterEventData.
        :param last_err_code: The last_err_code of this InverterEventData.
        """
        self.openapi_types = {
            'appliance_id': str,
            'gateway_id': str,
            'model': str,
            'manufacturer': str,
            'type': str,
            'kind': str,
            'name': str,
            'serial_number': str,
            'system_id': str,
            'system_name': str,
            'status': str,
            'last_status': str,
            'err_code': str,
            'last_err_code': str
        }

        self.attribute_map = {
            'appliance_id': 'applianceID',
            'gateway_id': 'gatewayID',
            'model': 'model',
            'manufacturer': 'manufacturer',
            'type': 'type',
            'kind': 'kind',
            'name': 'name',
            'serial_number': 'serialNumber',
            'system_id': 'systemID',
            'system_name': 'systemName',
            'status': 'status',
            'last_status': 'lastStatus',
            'err_code': 'errCode',
            'last_err_code': 'lastErrCode'
        }

        self._appliance_id = appliance_id
        self._gateway_id = gateway_id
        self._model = model
        self._manufacturer = manufacturer
        self._type = type
        self._kind = kind
        self._name = name
        self._serial_number = serial_number
        self._system_id = system_id
        self._system_name = system_name
        self._status = status
        self._last_status = last_status
        self._err_code = err_code
        self._last_err_code = last_err_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InverterEventData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InverterEventData of this InverterEventData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appliance_id(self):
        """Gets the appliance_id of this InverterEventData.

        ID of the appliance that caused this event.

        :return: The appliance_id of this InverterEventData.
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this InverterEventData.

        ID of the appliance that caused this event.

        :param appliance_id: The appliance_id of this InverterEventData.
        :type appliance_id: str
        """
        if appliance_id is None:
            raise ValueError("Invalid value for `appliance_id`, must not be `None`")

        self._appliance_id = appliance_id

    @property
    def gateway_id(self):
        """Gets the gateway_id of this InverterEventData.

        The ID of the gateway that connects to the appliance.

        :return: The gateway_id of this InverterEventData.
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this InverterEventData.

        The ID of the gateway that connects to the appliance.

        :param gateway_id: The gateway_id of this InverterEventData.
        :type gateway_id: str
        """
        if gateway_id is None:
            raise ValueError("Invalid value for `gateway_id`, must not be `None`")

        self._gateway_id = gateway_id

    @property
    def model(self):
        """Gets the model of this InverterEventData.

        Model description of the appliance.

        :return: The model of this InverterEventData.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this InverterEventData.

        Model description of the appliance.

        :param model: The model of this InverterEventData.
        :type model: str
        """

        self._model = model

    @property
    def manufacturer(self):
        """Gets the manufacturer of this InverterEventData.

        Manufacturer of the appliance.

        :return: The manufacturer of this InverterEventData.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this InverterEventData.

        Manufacturer of the appliance.

        :param manufacturer: The manufacturer of this InverterEventData.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def type(self):
        """Gets the type of this InverterEventData.

        General type of the appliance.

        :return: The type of this InverterEventData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InverterEventData.

        General type of the appliance.

        :param type: The type of this InverterEventData.
        :type type: str
        """
        allowed_values = ["UNKNOWN", "INVERTER", "METER", "EVSTATION", "HEAT_PUMP", "HEATER", "CONTAINER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def kind(self):
        """Gets the kind of this InverterEventData.

        Kind of the appliance is used to provide further details on the appliance configuration and mode of operation. The kind property is only available for appliances with type INVERTER or METER. For inverters, only UNKNOWN, PV, BATTERY, HYBRID and PV_EXTERNAL are valid values. They describe the  kind of connected appliance(s) and define the role of the inverter in the system. For meters, kind specifies the appliance the meter is attached to. It resembles the location the meter is installed in. 

        :return: The kind of this InverterEventData.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this InverterEventData.

        Kind of the appliance is used to provide further details on the appliance configuration and mode of operation. The kind property is only available for appliances with type INVERTER or METER. For inverters, only UNKNOWN, PV, BATTERY, HYBRID and PV_EXTERNAL are valid values. They describe the  kind of connected appliance(s) and define the role of the inverter in the system. For meters, kind specifies the appliance the meter is attached to. It resembles the location the meter is installed in. 

        :param kind: The kind of this InverterEventData.
        :type kind: str
        """
        allowed_values = ["UNKNOWN", "PV", "BATTERY", "HYBRID", "PV_EXTERNAL", "GRID", "HEAT_PUMP", "FUEL_CELL", "HEAT_PUMP_EXTERNAL", "EVSTATION", "BTTP", "HEATING", "MISC", "CLUSTER", "WIND_TURBINE"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this InverterEventData.

        The name of the appliance as defined by the customer.

        :return: The name of this InverterEventData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InverterEventData.

        The name of the appliance as defined by the customer.

        :param name: The name of this InverterEventData.
        :type name: str
        """

        self._name = name

    @property
    def serial_number(self):
        """Gets the serial_number of this InverterEventData.

        Serial number of the appliance as returned by the appliance.

        :return: The serial_number of this InverterEventData.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this InverterEventData.

        Serial number of the appliance as returned by the appliance.

        :param serial_number: The serial_number of this InverterEventData.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def system_id(self):
        """Gets the system_id of this InverterEventData.

        The ID of the system that the gateway and appliance run in.

        :return: The system_id of this InverterEventData.
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this InverterEventData.

        The ID of the system that the gateway and appliance run in.

        :param system_id: The system_id of this InverterEventData.
        :type system_id: str
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")

        self._system_id = system_id

    @property
    def system_name(self):
        """Gets the system_name of this InverterEventData.

        Name of the system as defined by the customer.

        :return: The system_name of this InverterEventData.
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this InverterEventData.

        Name of the system as defined by the customer.

        :param system_name: The system_name of this InverterEventData.
        :type system_name: str
        """

        self._system_name = system_name

    @property
    def status(self):
        """Gets the status of this InverterEventData.

        Current (new) status of the inverter.

        :return: The status of this InverterEventData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InverterEventData.

        Current (new) status of the inverter.

        :param status: The status of this InverterEventData.
        :type status: str
        """
        allowed_values = ["UNKNOWN", "OK", "WARNING", "ERROR"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def last_status(self):
        """Gets the last_status of this InverterEventData.

        Last status of the inverter.

        :return: The last_status of this InverterEventData.
        :rtype: str
        """
        return self._last_status

    @last_status.setter
    def last_status(self, last_status):
        """Sets the last_status of this InverterEventData.

        Last status of the inverter.

        :param last_status: The last_status of this InverterEventData.
        :type last_status: str
        """
        allowed_values = ["UNKNOWN", "OK", "WARNING", "ERROR"]  # noqa: E501
        if last_status not in allowed_values:
            raise ValueError(
                "Invalid value for `last_status` ({0}), must be one of {1}"
                .format(last_status, allowed_values)
            )

        self._last_status = last_status

    @property
    def err_code(self):
        """Gets the err_code of this InverterEventData.

        Current (new) error code as returned by the appliance. The value depends on the appliance manufacturer, model and firmware. Please refer to the manufacturers specification. 

        :return: The err_code of this InverterEventData.
        :rtype: str
        """
        return self._err_code

    @err_code.setter
    def err_code(self, err_code):
        """Sets the err_code of this InverterEventData.

        Current (new) error code as returned by the appliance. The value depends on the appliance manufacturer, model and firmware. Please refer to the manufacturers specification. 

        :param err_code: The err_code of this InverterEventData.
        :type err_code: str
        """

        self._err_code = err_code

    @property
    def last_err_code(self):
        """Gets the last_err_code of this InverterEventData.

        Last error code as returned by the appliance. The value depends on the appliance manufacturer, model and firmware. Please refer to the manufacturers specification. 

        :return: The last_err_code of this InverterEventData.
        :rtype: str
        """
        return self._last_err_code

    @last_err_code.setter
    def last_err_code(self, last_err_code):
        """Sets the last_err_code of this InverterEventData.

        Last error code as returned by the appliance. The value depends on the appliance manufacturer, model and firmware. Please refer to the manufacturers specification. 

        :param last_err_code: The last_err_code of this InverterEventData.
        :type last_err_code: str
        """

        self._last_err_code = last_err_code
