// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Example XENON webhook receiver
 *
 * This is an example webhook receiver for XENON.
 *
 * API version: v1.0.0
 * Contact: developer-community@gridx.de
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) *DefaultAPIController {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"ProcessXenonWebhookEvent": Route{
			"ProcessXenonWebhookEvent",
			strings.ToUpper("Post"),
			"/hooks/xenon",
			c.ProcessXenonWebhookEvent,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the DefaultAPIController
func (c *DefaultAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ProcessXenonWebhookEvent",
			strings.ToUpper("Post"),
			"/hooks/xenon",
			c.ProcessXenonWebhookEvent,
		},
	}
}



// ProcessXenonWebhookEvent - 
func (c *DefaultAPIController) ProcessXenonWebhookEvent(w http.ResponseWriter, r *http.Request) {
	var webhookEventRequestParam WebhookEventRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&webhookEventRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWebhookEventRequestRequired(webhookEventRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWebhookEventRequestConstraints(webhookEventRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ProcessXenonWebhookEvent(r.Context(), webhookEventRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
