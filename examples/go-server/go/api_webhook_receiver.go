/*
 * Webhook Event Receiver API
 *
 * This API describes the event webhook calling convention. In order to receive webhook events from the gridX API, third parties must implement endpoints according to this specification. In the following, the external partner API is referred to as  \"external API\", while the gridX API is called \"gridX\".
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// WebhookReceiverAPIController binds http requests to an api service and writes the service results to the http response
type WebhookReceiverAPIController struct {
	service      WebhookReceiverAPIServicer
	errorHandler ErrorHandler
}

// WebhookReceiverAPIOption for how the controller is set up.
type WebhookReceiverAPIOption func(*WebhookReceiverAPIController)

// WithWebhookReceiverAPIErrorHandler inject ErrorHandler into controller
func WithWebhookReceiverAPIErrorHandler(h ErrorHandler) WebhookReceiverAPIOption {
	return func(c *WebhookReceiverAPIController) {
		c.errorHandler = h
	}
}

// NewWebhookReceiverAPIController creates a default api controller
func NewWebhookReceiverAPIController(s WebhookReceiverAPIServicer, opts ...WebhookReceiverAPIOption) Router {
	controller := &WebhookReceiverAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WebhookReceiverAPIController
func (c *WebhookReceiverAPIController) Routes() Routes {
	return Routes{
		"EventsApplianceCreatePost": Route{
			strings.ToUpper("Post"),
			"/gridx/events/appliance/create",
			c.EventsApplianceCreatePost,
		},
		"EventsApplianceOfflinePost": Route{
			strings.ToUpper("Post"),
			"/gridx/events/appliance/offline",
			c.EventsApplianceOfflinePost,
		},
		"EventsApplianceOnlinePost": Route{
			strings.ToUpper("Post"),
			"/gridx/events/appliance/online",
			c.EventsApplianceOnlinePost,
		},
		"EventsComissioningDonePost": Route{
			strings.ToUpper("Post"),
			"/gridx/events/comissioning/done",
			c.EventsComissioningDonePost,
		},
		"EventsEvPluggedPost": Route{
			strings.ToUpper("Post"),
			"/gridx/events/ev/plugged",
			c.EventsEvPluggedPost,
		},
		"EventsGatewayCreatePost": Route{
			strings.ToUpper("Post"),
			"/gridx/events/gateway/create",
			c.EventsGatewayCreatePost,
		},
		"EventsGatewayOfflinePost": Route{
			strings.ToUpper("Post"),
			"/gridx/events/gateway/offline",
			c.EventsGatewayOfflinePost,
		},
		"EventsGatewayOnlinePost": Route{
			strings.ToUpper("Post"),
			"/gridx/events/gateway/online",
			c.EventsGatewayOnlinePost,
		},
		"EventsInverterStatusPost": Route{
			strings.ToUpper("Post"),
			"/gridx/events/inverter/status",
			c.EventsInverterStatusPost,
		},
	}
}

// EventsApplianceCreatePost - Webhook Receiver
func (c *WebhookReceiverAPIController) EventsApplianceCreatePost(w http.ResponseWriter, r *http.Request) {
	xSignatureParam := r.Header.Get("X-Signature")
	applianceCreateEventParam := ApplianceCreateEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&applianceCreateEventParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApplianceCreateEventRequired(applianceCreateEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApplianceCreateEventConstraints(applianceCreateEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EventsApplianceCreatePost(r.Context(), xSignatureParam, applianceCreateEventParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EventsApplianceOfflinePost - Webhook Receiver
func (c *WebhookReceiverAPIController) EventsApplianceOfflinePost(w http.ResponseWriter, r *http.Request) {
	xSignatureParam := r.Header.Get("X-Signature")
	applianceOfflineEventParam := ApplianceOfflineEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&applianceOfflineEventParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApplianceOfflineEventRequired(applianceOfflineEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApplianceOfflineEventConstraints(applianceOfflineEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EventsApplianceOfflinePost(r.Context(), xSignatureParam, applianceOfflineEventParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EventsApplianceOnlinePost - Webhook Receiver
func (c *WebhookReceiverAPIController) EventsApplianceOnlinePost(w http.ResponseWriter, r *http.Request) {
	xSignatureParam := r.Header.Get("X-Signature")
	applianceOnlineEventParam := ApplianceOnlineEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&applianceOnlineEventParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApplianceOnlineEventRequired(applianceOnlineEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApplianceOnlineEventConstraints(applianceOnlineEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EventsApplianceOnlinePost(r.Context(), xSignatureParam, applianceOnlineEventParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EventsComissioningDonePost - Webhook Receiver
func (c *WebhookReceiverAPIController) EventsComissioningDonePost(w http.ResponseWriter, r *http.Request) {
	xSignatureParam := r.Header.Get("X-Signature")
	comissioningDoneEventParam := ComissioningDoneEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&comissioningDoneEventParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertComissioningDoneEventRequired(comissioningDoneEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertComissioningDoneEventConstraints(comissioningDoneEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EventsComissioningDonePost(r.Context(), xSignatureParam, comissioningDoneEventParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EventsEvPluggedPost - Webhook Receiver
func (c *WebhookReceiverAPIController) EventsEvPluggedPost(w http.ResponseWriter, r *http.Request) {
	xSignatureParam := r.Header.Get("X-Signature")
	evPluggedEventParam := EvPluggedEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&evPluggedEventParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertEvPluggedEventRequired(evPluggedEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertEvPluggedEventConstraints(evPluggedEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EventsEvPluggedPost(r.Context(), xSignatureParam, evPluggedEventParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EventsGatewayCreatePost - Webhook Receiver
func (c *WebhookReceiverAPIController) EventsGatewayCreatePost(w http.ResponseWriter, r *http.Request) {
	xSignatureParam := r.Header.Get("X-Signature")
	gatewayCreateEventParam := GatewayCreateEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&gatewayCreateEventParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGatewayCreateEventRequired(gatewayCreateEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGatewayCreateEventConstraints(gatewayCreateEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EventsGatewayCreatePost(r.Context(), xSignatureParam, gatewayCreateEventParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EventsGatewayOfflinePost - Webhook Receiver
func (c *WebhookReceiverAPIController) EventsGatewayOfflinePost(w http.ResponseWriter, r *http.Request) {
	xSignatureParam := r.Header.Get("X-Signature")
	gatewayOfflineEventParam := GatewayOfflineEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&gatewayOfflineEventParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGatewayOfflineEventRequired(gatewayOfflineEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGatewayOfflineEventConstraints(gatewayOfflineEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EventsGatewayOfflinePost(r.Context(), xSignatureParam, gatewayOfflineEventParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EventsGatewayOnlinePost - Webhook Receiver
func (c *WebhookReceiverAPIController) EventsGatewayOnlinePost(w http.ResponseWriter, r *http.Request) {
	xSignatureParam := r.Header.Get("X-Signature")
	gatewayOnlineEventParam := GatewayOnlineEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&gatewayOnlineEventParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGatewayOnlineEventRequired(gatewayOnlineEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGatewayOnlineEventConstraints(gatewayOnlineEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EventsGatewayOnlinePost(r.Context(), xSignatureParam, gatewayOnlineEventParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EventsInverterStatusPost - Webhook Receiver
func (c *WebhookReceiverAPIController) EventsInverterStatusPost(w http.ResponseWriter, r *http.Request) {
	xSignatureParam := r.Header.Get("X-Signature")
	inverterStatusEventParam := InverterStatusEvent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&inverterStatusEventParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertInverterStatusEventRequired(inverterStatusEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertInverterStatusEventConstraints(inverterStatusEventParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EventsInverterStatusPost(r.Context(), xSignatureParam, inverterStatusEventParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
