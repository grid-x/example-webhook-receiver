# coding: utf-8

"""
    Webhook Event Receiver API

    This API describes the event webhook calling convention. In order to receive webhook events from the gridX API, third parties must implement endpoints according to this specification. In the following, the external partner API is referred to as  \"external API\", while the gridX API is called \"gridX\". 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from openapi_client.models.event import Event

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class WebhookReceiverApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def events_event_type_post(self, event_type : Annotated[StrictStr, Field(..., description="The type of an event (e.g. 'appliance/offline'). The path depends on how the webhook has been configured and is not a hard requirement.")], x_signature : Annotated[StrictStr, Field(..., description="The value of this header can be used to authenticate the event payload and is in the format `<method>=<signature>`. - `method` must be \"sha512\" in any case. - `signature` is computed using the HMAC algorithm (as described in [RFC2104](https://datatracker.ietf.org/doc/html/rfc2104)) with SHA512 as hash function, with the request body as data and a pre-defined secret as key (that is only known between the external API and gridX). This is the same method as described in the W3C WebSub standard X-Hub-Signature, see: https://www.w3.org/TR/websub/#authenticated-content-distribution ")], event : Annotated[Event, Field(..., description="The event's payload, partly depending on the event's type (see parameter eventType).")], **kwargs) -> None:  # noqa: E501
        """Webhook Receiver  # noqa: E501

        Called by the gridX API when delivering a webhook. Third parties should use this reference to implement an HTTP handler capable of handling incoming webhooks.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.events_event_type_post(event_type, x_signature, event, async_req=True)
        >>> result = thread.get()

        :param event_type: The type of an event (e.g. 'appliance/offline'). The path depends on how the webhook has been configured and is not a hard requirement. (required)
        :type event_type: str
        :param x_signature: The value of this header can be used to authenticate the event payload and is in the format `<method>=<signature>`. - `method` must be \"sha512\" in any case. - `signature` is computed using the HMAC algorithm (as described in [RFC2104](https://datatracker.ietf.org/doc/html/rfc2104)) with SHA512 as hash function, with the request body as data and a pre-defined secret as key (that is only known between the external API and gridX). This is the same method as described in the W3C WebSub standard X-Hub-Signature, see: https://www.w3.org/TR/websub/#authenticated-content-distribution  (required)
        :type x_signature: str
        :param event: The event's payload, partly depending on the event's type (see parameter eventType). (required)
        :type event: Event
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the events_event_type_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.events_event_type_post_with_http_info(event_type, x_signature, event, **kwargs)  # noqa: E501

    @validate_arguments
    def events_event_type_post_with_http_info(self, event_type : Annotated[StrictStr, Field(..., description="The type of an event (e.g. 'appliance/offline'). The path depends on how the webhook has been configured and is not a hard requirement.")], x_signature : Annotated[StrictStr, Field(..., description="The value of this header can be used to authenticate the event payload and is in the format `<method>=<signature>`. - `method` must be \"sha512\" in any case. - `signature` is computed using the HMAC algorithm (as described in [RFC2104](https://datatracker.ietf.org/doc/html/rfc2104)) with SHA512 as hash function, with the request body as data and a pre-defined secret as key (that is only known between the external API and gridX). This is the same method as described in the W3C WebSub standard X-Hub-Signature, see: https://www.w3.org/TR/websub/#authenticated-content-distribution ")], event : Annotated[Event, Field(..., description="The event's payload, partly depending on the event's type (see parameter eventType).")], **kwargs) -> ApiResponse:  # noqa: E501
        """Webhook Receiver  # noqa: E501

        Called by the gridX API when delivering a webhook. Third parties should use this reference to implement an HTTP handler capable of handling incoming webhooks.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.events_event_type_post_with_http_info(event_type, x_signature, event, async_req=True)
        >>> result = thread.get()

        :param event_type: The type of an event (e.g. 'appliance/offline'). The path depends on how the webhook has been configured and is not a hard requirement. (required)
        :type event_type: str
        :param x_signature: The value of this header can be used to authenticate the event payload and is in the format `<method>=<signature>`. - `method` must be \"sha512\" in any case. - `signature` is computed using the HMAC algorithm (as described in [RFC2104](https://datatracker.ietf.org/doc/html/rfc2104)) with SHA512 as hash function, with the request body as data and a pre-defined secret as key (that is only known between the external API and gridX). This is the same method as described in the W3C WebSub standard X-Hub-Signature, see: https://www.w3.org/TR/websub/#authenticated-content-distribution  (required)
        :type x_signature: str
        :param event: The event's payload, partly depending on the event's type (see parameter eventType). (required)
        :type event: Event
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'event_type',
            'x_signature',
            'event'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method events_event_type_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['event_type']:
            _path_params['eventType'] = _params['event_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_signature']:
            _header_params['X-Signature'] = _params['x_signature']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['event'] is not None:
            _body_params = _params['event']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/events/{eventType}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
