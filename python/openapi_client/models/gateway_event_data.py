# coding: utf-8

"""
    Webhook Event Receiver API

    This API describes the event webhook calling convention. In order to receive webhook events from the gridX API, third parties must implement endpoints according to this specification. In the following, the external partner API is referred to as  \"external API\", while the gridX API is called \"gridX\". 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class GatewayEventData(BaseModel):
    """
    Payload for `gateway/*` events.  # noqa: E501
    """
    gateway_id: StrictStr = Field(..., alias="gatewayID", description="The ID of the gateway this event is triggered for.")
    gateway_name: Optional[StrictStr] = Field(None, alias="gatewayName", description="The name of the gateway corresponding to the gatewayID.")
    gateway_serialnumber: Optional[StrictStr] = Field(None, alias="gatewaySerialnumber", description="The serialnumber of the gateway corresponding to the gatewayID.")
    system_id: StrictStr = Field(..., alias="systemID", description="The ID of the system this event is triggered for.")
    system_name: Optional[StrictStr] = Field(None, alias="systemName", description="The name of the system corresponding to the systemID.")
    user_id: Optional[StrictStr] = Field(None, alias="userID", description="The ID of the user that owns the system.")
    user_name: Optional[StrictStr] = Field(None, alias="userName", description="Name of the user belonging to the userID.")
    user_mail: Optional[StrictStr] = Field(None, alias="userMail", description="E-Mail address of the user belonging to the userID.")
    __properties = ["gatewayID", "gatewayName", "gatewaySerialnumber", "systemID", "systemName", "userID", "userName", "userMail"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GatewayEventData:
        """Create an instance of GatewayEventData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GatewayEventData:
        """Create an instance of GatewayEventData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GatewayEventData.parse_obj(obj)

        _obj = GatewayEventData.parse_obj({
            "gateway_id": obj.get("gatewayID"),
            "gateway_name": obj.get("gatewayName"),
            "gateway_serialnumber": obj.get("gatewaySerialnumber"),
            "system_id": obj.get("systemID"),
            "system_name": obj.get("systemName"),
            "user_id": obj.get("userID"),
            "user_name": obj.get("userName"),
            "user_mail": obj.get("userMail")
        })
        return _obj


