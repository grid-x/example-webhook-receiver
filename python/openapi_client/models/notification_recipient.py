# coding: utf-8

"""
    Webhook Event Receiver API

    This API describes the event webhook calling convention. In order to receive webhook events from the gridX API, third parties must implement endpoints according to this specification. In the following, the external partner API is referred to as  \"external API\", while the gridX API is called \"gridX\". 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class NotificationRecipient(BaseModel):
    """
    NotificationRecipient
    """
    user_id: Optional[StrictStr] = Field(None, alias="userID", description="User ID for identifying the user via gridX API.")
    account_id: Optional[StrictStr] = Field(None, alias="accountID", description="Account ID for identifying the user via gridX API.")
    email: Optional[StrictStr] = Field(None, description="Email address of the recipient.")
    full_name: Optional[StrictStr] = Field(None, alias="fullName", description="Full name of the recipient if available.")
    locale: Optional[StrictStr] = Field(None, description="Determined locale of the user in format of a language tag, `<language>_<COUNTRY>`, e.g. `en_GB`.")
    __properties = ["userID", "accountID", "email", "fullName", "locale"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NotificationRecipient:
        """Create an instance of NotificationRecipient from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NotificationRecipient:
        """Create an instance of NotificationRecipient from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NotificationRecipient.parse_obj(obj)

        _obj = NotificationRecipient.parse_obj({
            "user_id": obj.get("userID"),
            "account_id": obj.get("accountID"),
            "email": obj.get("email"),
            "full_name": obj.get("fullName"),
            "locale": obj.get("locale")
        })
        return _obj


