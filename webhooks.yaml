openapi: 3.0.3
info:
  title: Webhook Event Receiver API
  description: >
    This API describes the event webhook calling convention.

    In order to receive webhook events from the gridX API, third parties must implement endpoints
    according to this specification. In the following, the external partner API is referred to as 
    "external API", while the gridX API is called "gridX".
  version: 1.0.0
  x-audience: company-internal
  x-api-id: 7b2283ae-4623-42c2-af84-ef6ce4d72993

servers:
  - url: https://external-api/gridx
  - url: http://localhost:8080/gridx

paths:
  /events/appliance/create:
    post:
      tags:
      - Webhook Receiver
      summary: Webhook Receiver
      description: >
        Called by the gridX API when delivering a webhook. Third parties should use this reference
        to implement an HTTP handler capable of handling incoming webhooks. 
      responses:
        '200':
          description: >
            Successfully received event (no issue with payload or validation).
        '403':
          description: >
            Indicate that signature validation was not successful.
        '404':
          description: >
            Not Found - indicate that the external API is not available.
        '500':
          description: >
            Indicate that there is a temporary fault on the external API. gridX will do its best to retry delivery in this case.
        '503':
          description: >
            Indicate that the service is temporarily unavailable. gridX will do its best to retry delivery in this case.
      requestBody:
        description: The event's payload, partly depending on the event's type (see parameter eventType).
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      parameters:
        - name: X-Signature
          in: header
          required: true
          description: >
            The value of this header can be used to authenticate the event payload and is in the format `<method>=<signature>`.
    
            - `method` must be "sha512" in any case.

            - `signature` is computed using the HMAC algorithm (as described in [RFC2104](https://datatracker.ietf.org/doc/html/rfc2104)) with SHA512 as hash function, with the request body as data and a pre-defined secret as key (that is only known between the external API and gridX).
    
            This is the same method as described in the W3C WebSub standard X-Hub-Signature, see: https://www.w3.org/TR/websub/#authenticated-content-distribution
          schema:
            type: string
          example: "sha512=<signature>"
        #- name: X-Signature-RS256
        #  in: header
        #  required: true
        #  description: >
        #    The value of this header can be used to authenticate the event payload by using [RS256](https://datatracker.ietf.org/doc/html/rfc7518#section-3.3).
        #
        #    The signature is created by signing the SHA256 hash of the payload and signing it via RSA with a private key that is known solely to gridX.
        #    The external API can use the public key to validate that the signature is correct.
        #  schema:
        #    type: string
    

components:
  schemas:
    Event:
      title: Event
      description: >
        Event which follows the [CloudEvents v1.0.1 specification](https://github.com/cloudevents/spec/blob/v1.0.1/spec.md). 
        An event consists of metadata (such as occurrence time and ID) and the actual `data` payload that depends on the event's `type`.
        The extension attribute `notification` can be used by consumers to produce a notification.
      type: object
      required:
        - id
        - time
        - type
        - specVersion
        - source
      properties:
        id:
          type: string
          format: uuid
        time:
          type: string
          format: date-time
          description: Time when the event has occurred in RFC3339 format.
        type:
          type: string
          description: Type of the event, can be used to determine how the `data` payload is deserialized.
          enum:
            - appliance/create
        dataContentType:
          type: string
          description: Content-Type indicating how to parse the `data` attribute. Only 'application/json' is supported for now. If ommitted, it is guaranteed to be `application/json`.
          example: application/json
          default: application/json
          enum:
            - application/json
        specVersion:
          type: string
          description: The CloudEvents specification that is followed, currently "1.0". Only consists of major and minor version parts, to allow patching in a backward-compatible fashion.
          example: "1.0"
        data:
          $ref: "#/components/schemas/ApplianceEventData"
         
        source:
          type: string
          description: Source of the event, which is usually a resource identifier path that can be used to identify the object which triggered the event.
          example: /systems/5eda17ec-4dc9-46d5-b3b8-c396f75a760f 
        correlationID:
          type: string
          format: uuid
          description: ID to identify the request triggering the event.
        notification:
          $ref: "#/components/schemas/Notification"
    Notification:
      type: object
      description: Consists of a message and a recipient. Can be used by consumers to produce a notification `message` which can be sent to the `recipient`.
      required:
        - recipient
        - message
      properties:
        recipient:
          type: object
          properties:
            userID:
              type: string
              format: uuid
              description: User ID for identifying the user via gridX API.
            accountID:
              type: string
              format: uuid
              description: Account ID for identifying the user via gridX API.
            email:
              type: string
              format: email
              description: Email address of the recipient.
            fullName:
              type: string
              description: Full name of the recipient if available.
            locale:
              type: string
              description: Determined locale of the user in format of a language tag, `<language>_<COUNTRY>`, e.g. `en_GB`.
              example: fr_FR
        message:
          type: object
          properties:
            title:
              description: Title of the message, in the `locale` of the `recipient`. Subject to changes at any time.
            textContentType:
              description: Content-Type of the `text` attribute. 
              type: string
              enum:
                - text/html
                - text/plain
            text:
              description: Exemplary text message in the `locale` of the `recipient`. Subject to changes at any time.
              type: string
            actionURL:
              type: string
              format: url
              description: URL that links to further information about the event's origin, usable for call-to-action buttons.
    #SystemEventData:
    #  type: object
    #  description: Payload for `system/*` events.
    #  required:
    #    - systemID
    #  properties:
    #    systemID:
    #      type: string
    #      format: uuid
    #      description: The ID of the system this event triggered for.
    #      example: af87d7b3-316f-4d26-868c-4ae351095bdc
    #    systemName:
    #      type: string
    #      description: The name of the system corresponding to the systemID.
    #      example: My System
    GatewayEventData:
      type: object
      description: Payload for `gateway/*` events.
      required:
        - systemID
        - gatewayID
      properties:
        gatewayID:
          type: string
          format: uuid
          description: The ID of the gateway this event is triggered for.
          example: 680d63aa-6e1d-4447-af7c-35c5eb6ca810
        gatewayName:
          type: string
          description: The name of the gateway corresponding to the gatewayID.  
          example: My gridBox
        gatewaySerialnumber:
          type: string
          description: The serialnumber of the gateway corresponding to the gatewayID.
          example: D403-007-000-000-001-B-X
        systemID:
          type: string
          format: uuid
          description: The ID of the system this event is triggered for.
          example: af87d7b3-316f-4d26-868c-4ae351095bdc
        systemName:
          type: string
          description: The name of the system corresponding to the systemID.
          example: ExampleSystem
        userID:
          type: string
          format: uuid
          description: The ID of the user that owns the system.
          example: a115d9e3-6e78-4ddf-8676-a98c28ad8249
        userName:
          type: string
          description: Name of the user belonging to the userID.
          example: Max Mustermann
        userMail:
          type: string
          description: E-Mail address of the user belonging to the userID.
          example: max.mustermann@muster.de
    ApplianceEventData:
      type: object
      description: Payload for `appliance/*` events.
      required:
        - applianceID
        - gatewayID
        - systemID
      properties:
        applianceID:
          type: string
          format: uuid
          description: ID of the appliance that caused this event.
          example: fc0a6ac7-64ce-4276-a7cd-bace946af433
        gatewayID:
          type: string
          format: uuid
          description: The ID of the gateway that connects to the appliance.
          example: 25ccab17-cd40-4db1-a320-a986d1c15fb1
        model:
          type: string
          description: Model description of the appliance.
          example: Baz
        manufacturer:
          type: string
          description: Manufacturer of the appliance.
          example: Iskraemeco
        type:
          type: string
          description: General type of the appliance. 
          enum:
            - UNKNOWN
            - INVERTER
            - METER
            - EVSTATION
            - HEAT_PUMP
            - HEATER
            - CONTAINER
          example: METER
        kind:
          type: string
          description: > 
            Kind of the appliance is used to provide further details on the appliance
            configuration and mode of operation. The kind property is only available
            for appliances with type INVERTER or METER. For inverters, only UNKNOWN,
            PV, BATTERY, HYBRID and PV_EXTERNAL are valid values. They describe the 
            kind of connected appliance(s) and define the role of the inverter in the
            system. For meters, kind specifies the appliance the meter is attached to.
            It resembles the location the meter is installed in.
          enum:
            - UNKNOWN
            - PV
            - BATTERY
            - HYBRID
            - PV_EXTERNAL
            - GRID
            - HEAT_PUMP
            - FUEL_CELL
            - HEAT_PUMP_EXTERNAL
            - EVSTATION
            - BTTP
            - HEATING
            - MISC
            - CLUSTER
            - WIND_TURBINE
          example: BATTERY
        name:
          type: string
          description: The name of the appliance as defined by the customer.
          example: ExampleMeter
        serialNumber:
          type: string
          description: Serial number of the appliance as returned by the appliance.
          example: '9312355'
        systemID:
          type: string
          format: uuid
          description: The ID of the system that the gateway and appliance run in.
          example: c9db369e-7cf8-4ad1-ade5-46f61a5125c2
        systemName:
          type: string
          description: Name of the system as defined by the customer.
          example: ExampleSystem
    InverterEventData:
      description: >
        Payload for `inverter/*` events. The event describes the change of an inverter from
        one status to a new one. The old status is referred to as the lastStatus.
      allOf: 
        - $ref: '#/components/schemas/ApplianceEventData'
        - type: object
          required:
            - status
            - lastStatus
          properties:
            status:
              type: string
              description: Current (new) status of the inverter.
              enum:
                - UNKNOWN
                - OK
                - WARNING
                - ERROR
              example: OK
            lastStatus:
              type: string
              description: Last status of the inverter.
              enum:
                - UNKNOWN
                - OK
                - WARNING
                - ERROR
              example: ERROR
            errCode:
              type: string
              description: > 
                Current (new) error code as returned by the appliance. The value depends on the appliance
                manufacturer, model and firmware. Please refer to the manufacturers specification.
            lastErrCode:
              type: string
              description: > 
                Last error code as returned by the appliance. The value depends on the appliance
                manufacturer, model and firmware. Please refer to the manufacturers specification.
              example: F71A
    EVEventData:
      description: >
        Payload for `ev/*` events. The event describes the change of an EV's state
        at a charging station.
      allOf:
        - $ref: '#/components/schemas/ApplianceEventData'
        - type: object
          required:
            - state  
          properties:
            evseID:
              type: string
              description: Electirc Vehicle Supply Equipment ID
              example: FR*A23*E45B*78C
            state:
              type: string
              description: State of the EV charging station.
              enum:
                - plugged
              example: plugged
            
    #PasswordResetData:
    #  type: object
    #  description: Payload for `auth/password-reset` events.
    #  properties:
    #    passwordResetURL:
    #      type: string
    #      format: url
    #      description: >
    #        URL to reset the password by the user.
    #        The URL is confidential and should be handled with care. 
    #        It should be exclusively delivered to the recipient user.
    #        It must be ensured to not log the URL anywhere or expose it otherwise.
    #SignUpData:
    #  type: object
    #  description: Payload for `auth/signup` events.
    #  properties:
    #    passwordSetURL:
    #      type: string
    #      format: url
    #      description: >
    #        Optionally contains a URL to set the password initially by the user.
    #        The URL is confidential and should be handled with care. 
    #        It should be exclusively delivered to the recipient user.
    #        It must be ensured to not log the URL anywhere or expose it otherwise.
    CommissioningData:
      type: object
      description: Payload for `commissioning/done` events.
      properties:
        customerID:
          type: string
          format: uuid
          description: The ID of the newly created customer after the commissioning process.
          example: 1a81c4f4-5f6c-48e6-be91-2528c1c0bb28
        customerEmail:
          type: string
          format: email
          description: The email of the newly created customer after the commissioning process.
          example: test@email.com
        customerAddress:
          type: string
          format: string
          description: The address of the newly created customer after the commissioning process.
          example: Straße Str. 1, 20359, Hamburg, Germany
        systemName:
          type: string
          format: string
          description: The name of the commissioned system.
          example: Test system
        gatewaySerialnumber:
          type: string
          description: The serialnumber of the gateway corresponding to the commissioned system.
          example: D403-007-000-000-001-B-X
