from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.event_data import EventData
from openapi_server.models.notification import Notification
from openapi_server import util

from openapi_server.models.event_data import EventData  # noqa: E501
from openapi_server.models.notification import Notification  # noqa: E501

class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, time=None, type=None, data_content_type='application/json', spec_version=None, data=None, source=None, correlation_id=None, notification=None):  # noqa: E501
        """Event - a model defined in OpenAPI

        :param id: The id of this Event.  # noqa: E501
        :type id: str
        :param time: The time of this Event.  # noqa: E501
        :type time: datetime
        :param type: The type of this Event.  # noqa: E501
        :type type: str
        :param data_content_type: The data_content_type of this Event.  # noqa: E501
        :type data_content_type: str
        :param spec_version: The spec_version of this Event.  # noqa: E501
        :type spec_version: str
        :param data: The data of this Event.  # noqa: E501
        :type data: EventData
        :param source: The source of this Event.  # noqa: E501
        :type source: str
        :param correlation_id: The correlation_id of this Event.  # noqa: E501
        :type correlation_id: str
        :param notification: The notification of this Event.  # noqa: E501
        :type notification: Notification
        """
        self.openapi_types = {
            'id': str,
            'time': datetime,
            'type': str,
            'data_content_type': str,
            'spec_version': str,
            'data': EventData,
            'source': str,
            'correlation_id': str,
            'notification': Notification
        }

        self.attribute_map = {
            'id': 'id',
            'time': 'time',
            'type': 'type',
            'data_content_type': 'dataContentType',
            'spec_version': 'specVersion',
            'data': 'data',
            'source': 'source',
            'correlation_id': 'correlationID',
            'notification': 'notification'
        }

        self._id = id
        self._time = time
        self._type = type
        self._data_content_type = data_content_type
        self._spec_version = spec_version
        self._data = data
        self._source = source
        self._correlation_id = correlation_id
        self._notification = notification

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def time(self) -> datetime:
        """Gets the time of this Event.

        Time when the event has occurred in RFC3339 format.  # noqa: E501

        :return: The time of this Event.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time: datetime):
        """Sets the time of this Event.

        Time when the event has occurred in RFC3339 format.  # noqa: E501

        :param time: The time of this Event.
        :type time: datetime
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def type(self) -> str:
        """Gets the type of this Event.

        Type of the event, can be used to determine how the `data` payload is deserialized.  # noqa: E501

        :return: The type of this Event.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Event.

        Type of the event, can be used to determine how the `data` payload is deserialized.  # noqa: E501

        :param type: The type of this Event.
        :type type: str
        """
        allowed_values = ["appliance/create", "appliance/offline", "appliance/online", "inverter/status", "gateway/create", "gateway/offline", "gateway/online", "ev/plugged", "commissioning/done"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def data_content_type(self) -> str:
        """Gets the data_content_type of this Event.

        Content-Type indicating how to parse the `data` attribute. Only 'application/json' is supported for now. If ommitted, it is guaranteed to be `application/json`.  # noqa: E501

        :return: The data_content_type of this Event.
        :rtype: str
        """
        return self._data_content_type

    @data_content_type.setter
    def data_content_type(self, data_content_type: str):
        """Sets the data_content_type of this Event.

        Content-Type indicating how to parse the `data` attribute. Only 'application/json' is supported for now. If ommitted, it is guaranteed to be `application/json`.  # noqa: E501

        :param data_content_type: The data_content_type of this Event.
        :type data_content_type: str
        """
        allowed_values = ["application/json"]  # noqa: E501
        if data_content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_content_type` ({0}), must be one of {1}"
                .format(data_content_type, allowed_values)
            )

        self._data_content_type = data_content_type

    @property
    def spec_version(self) -> str:
        """Gets the spec_version of this Event.

        The CloudEvents specification that is followed, currently \"1.0\". Only consists of major and minor version parts, to allow patching in a backward-compatible fashion.  # noqa: E501

        :return: The spec_version of this Event.
        :rtype: str
        """
        return self._spec_version

    @spec_version.setter
    def spec_version(self, spec_version: str):
        """Sets the spec_version of this Event.

        The CloudEvents specification that is followed, currently \"1.0\". Only consists of major and minor version parts, to allow patching in a backward-compatible fashion.  # noqa: E501

        :param spec_version: The spec_version of this Event.
        :type spec_version: str
        """
        if spec_version is None:
            raise ValueError("Invalid value for `spec_version`, must not be `None`")  # noqa: E501

        self._spec_version = spec_version

    @property
    def data(self) -> EventData:
        """Gets the data of this Event.


        :return: The data of this Event.
        :rtype: EventData
        """
        return self._data

    @data.setter
    def data(self, data: EventData):
        """Sets the data of this Event.


        :param data: The data of this Event.
        :type data: EventData
        """

        self._data = data

    @property
    def source(self) -> str:
        """Gets the source of this Event.

        Source of the event, which is usually a resource identifier path that can be used to identify the object which triggered the event.  # noqa: E501

        :return: The source of this Event.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this Event.

        Source of the event, which is usually a resource identifier path that can be used to identify the object which triggered the event.  # noqa: E501

        :param source: The source of this Event.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def correlation_id(self) -> str:
        """Gets the correlation_id of this Event.

        ID to identify the request triggering the event.  # noqa: E501

        :return: The correlation_id of this Event.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id: str):
        """Sets the correlation_id of this Event.

        ID to identify the request triggering the event.  # noqa: E501

        :param correlation_id: The correlation_id of this Event.
        :type correlation_id: str
        """

        self._correlation_id = correlation_id

    @property
    def notification(self) -> Notification:
        """Gets the notification of this Event.


        :return: The notification of this Event.
        :rtype: Notification
        """
        return self._notification

    @notification.setter
    def notification(self, notification: Notification):
        """Sets the notification of this Event.


        :param notification: The notification of this Event.
        :type notification: Notification
        """

        self._notification = notification
