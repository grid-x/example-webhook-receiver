from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class GatewayEventData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_id=None, gateway_name=None, gateway_serialnumber=None, system_id=None, system_name=None, user_id=None, user_name=None, user_mail=None):  # noqa: E501
        """GatewayEventData - a model defined in OpenAPI

        :param gateway_id: The gateway_id of this GatewayEventData.  # noqa: E501
        :type gateway_id: str
        :param gateway_name: The gateway_name of this GatewayEventData.  # noqa: E501
        :type gateway_name: str
        :param gateway_serialnumber: The gateway_serialnumber of this GatewayEventData.  # noqa: E501
        :type gateway_serialnumber: str
        :param system_id: The system_id of this GatewayEventData.  # noqa: E501
        :type system_id: str
        :param system_name: The system_name of this GatewayEventData.  # noqa: E501
        :type system_name: str
        :param user_id: The user_id of this GatewayEventData.  # noqa: E501
        :type user_id: str
        :param user_name: The user_name of this GatewayEventData.  # noqa: E501
        :type user_name: str
        :param user_mail: The user_mail of this GatewayEventData.  # noqa: E501
        :type user_mail: str
        """
        self.openapi_types = {
            'gateway_id': str,
            'gateway_name': str,
            'gateway_serialnumber': str,
            'system_id': str,
            'system_name': str,
            'user_id': str,
            'user_name': str,
            'user_mail': str
        }

        self.attribute_map = {
            'gateway_id': 'gatewayID',
            'gateway_name': 'gatewayName',
            'gateway_serialnumber': 'gatewaySerialnumber',
            'system_id': 'systemID',
            'system_name': 'systemName',
            'user_id': 'userID',
            'user_name': 'userName',
            'user_mail': 'userMail'
        }

        self._gateway_id = gateway_id
        self._gateway_name = gateway_name
        self._gateway_serialnumber = gateway_serialnumber
        self._system_id = system_id
        self._system_name = system_name
        self._user_id = user_id
        self._user_name = user_name
        self._user_mail = user_mail

    @classmethod
    def from_dict(cls, dikt) -> 'GatewayEventData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GatewayEventData of this GatewayEventData.  # noqa: E501
        :rtype: GatewayEventData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_id(self) -> str:
        """Gets the gateway_id of this GatewayEventData.

        The ID of the gateway this event is triggered for.  # noqa: E501

        :return: The gateway_id of this GatewayEventData.
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id: str):
        """Sets the gateway_id of this GatewayEventData.

        The ID of the gateway this event is triggered for.  # noqa: E501

        :param gateway_id: The gateway_id of this GatewayEventData.
        :type gateway_id: str
        """
        if gateway_id is None:
            raise ValueError("Invalid value for `gateway_id`, must not be `None`")  # noqa: E501

        self._gateway_id = gateway_id

    @property
    def gateway_name(self) -> str:
        """Gets the gateway_name of this GatewayEventData.

        The name of the gateway corresponding to the gatewayID.  # noqa: E501

        :return: The gateway_name of this GatewayEventData.
        :rtype: str
        """
        return self._gateway_name

    @gateway_name.setter
    def gateway_name(self, gateway_name: str):
        """Sets the gateway_name of this GatewayEventData.

        The name of the gateway corresponding to the gatewayID.  # noqa: E501

        :param gateway_name: The gateway_name of this GatewayEventData.
        :type gateway_name: str
        """

        self._gateway_name = gateway_name

    @property
    def gateway_serialnumber(self) -> str:
        """Gets the gateway_serialnumber of this GatewayEventData.

        The serialnumber of the gateway corresponding to the gatewayID.  # noqa: E501

        :return: The gateway_serialnumber of this GatewayEventData.
        :rtype: str
        """
        return self._gateway_serialnumber

    @gateway_serialnumber.setter
    def gateway_serialnumber(self, gateway_serialnumber: str):
        """Sets the gateway_serialnumber of this GatewayEventData.

        The serialnumber of the gateway corresponding to the gatewayID.  # noqa: E501

        :param gateway_serialnumber: The gateway_serialnumber of this GatewayEventData.
        :type gateway_serialnumber: str
        """

        self._gateway_serialnumber = gateway_serialnumber

    @property
    def system_id(self) -> str:
        """Gets the system_id of this GatewayEventData.

        The ID of the system this event is triggered for.  # noqa: E501

        :return: The system_id of this GatewayEventData.
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id: str):
        """Sets the system_id of this GatewayEventData.

        The ID of the system this event is triggered for.  # noqa: E501

        :param system_id: The system_id of this GatewayEventData.
        :type system_id: str
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")  # noqa: E501

        self._system_id = system_id

    @property
    def system_name(self) -> str:
        """Gets the system_name of this GatewayEventData.

        The name of the system corresponding to the systemID.  # noqa: E501

        :return: The system_name of this GatewayEventData.
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name: str):
        """Sets the system_name of this GatewayEventData.

        The name of the system corresponding to the systemID.  # noqa: E501

        :param system_name: The system_name of this GatewayEventData.
        :type system_name: str
        """

        self._system_name = system_name

    @property
    def user_id(self) -> str:
        """Gets the user_id of this GatewayEventData.

        The ID of the user that owns the system.  # noqa: E501

        :return: The user_id of this GatewayEventData.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this GatewayEventData.

        The ID of the user that owns the system.  # noqa: E501

        :param user_id: The user_id of this GatewayEventData.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def user_name(self) -> str:
        """Gets the user_name of this GatewayEventData.

        Name of the user belonging to the userID.  # noqa: E501

        :return: The user_name of this GatewayEventData.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this GatewayEventData.

        Name of the user belonging to the userID.  # noqa: E501

        :param user_name: The user_name of this GatewayEventData.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def user_mail(self) -> str:
        """Gets the user_mail of this GatewayEventData.

        E-Mail address of the user belonging to the userID.  # noqa: E501

        :return: The user_mail of this GatewayEventData.
        :rtype: str
        """
        return self._user_mail

    @user_mail.setter
    def user_mail(self, user_mail: str):
        """Sets the user_mail of this GatewayEventData.

        E-Mail address of the user belonging to the userID.  # noqa: E501

        :param user_mail: The user_mail of this GatewayEventData.
        :type user_mail: str
        """

        self._user_mail = user_mail
