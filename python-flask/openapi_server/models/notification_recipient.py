from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationRecipient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id=None, account_id=None, email=None, full_name=None, locale=None):  # noqa: E501
        """NotificationRecipient - a model defined in OpenAPI

        :param user_id: The user_id of this NotificationRecipient.  # noqa: E501
        :type user_id: str
        :param account_id: The account_id of this NotificationRecipient.  # noqa: E501
        :type account_id: str
        :param email: The email of this NotificationRecipient.  # noqa: E501
        :type email: str
        :param full_name: The full_name of this NotificationRecipient.  # noqa: E501
        :type full_name: str
        :param locale: The locale of this NotificationRecipient.  # noqa: E501
        :type locale: str
        """
        self.openapi_types = {
            'user_id': str,
            'account_id': str,
            'email': str,
            'full_name': str,
            'locale': str
        }

        self.attribute_map = {
            'user_id': 'userID',
            'account_id': 'accountID',
            'email': 'email',
            'full_name': 'fullName',
            'locale': 'locale'
        }

        self._user_id = user_id
        self._account_id = account_id
        self._email = email
        self._full_name = full_name
        self._locale = locale

    @classmethod
    def from_dict(cls, dikt) -> 'NotificationRecipient':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Notification_recipient of this NotificationRecipient.  # noqa: E501
        :rtype: NotificationRecipient
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this NotificationRecipient.

        User ID for identifying the user via gridX API.  # noqa: E501

        :return: The user_id of this NotificationRecipient.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this NotificationRecipient.

        User ID for identifying the user via gridX API.  # noqa: E501

        :param user_id: The user_id of this NotificationRecipient.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def account_id(self) -> str:
        """Gets the account_id of this NotificationRecipient.

        Account ID for identifying the user via gridX API.  # noqa: E501

        :return: The account_id of this NotificationRecipient.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this NotificationRecipient.

        Account ID for identifying the user via gridX API.  # noqa: E501

        :param account_id: The account_id of this NotificationRecipient.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def email(self) -> str:
        """Gets the email of this NotificationRecipient.

        Email address of the recipient.  # noqa: E501

        :return: The email of this NotificationRecipient.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this NotificationRecipient.

        Email address of the recipient.  # noqa: E501

        :param email: The email of this NotificationRecipient.
        :type email: str
        """

        self._email = email

    @property
    def full_name(self) -> str:
        """Gets the full_name of this NotificationRecipient.

        Full name of the recipient if available.  # noqa: E501

        :return: The full_name of this NotificationRecipient.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name: str):
        """Sets the full_name of this NotificationRecipient.

        Full name of the recipient if available.  # noqa: E501

        :param full_name: The full_name of this NotificationRecipient.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def locale(self) -> str:
        """Gets the locale of this NotificationRecipient.

        Determined locale of the user in format of a language tag, `<language>_<COUNTRY>`, e.g. `en_GB`.  # noqa: E501

        :return: The locale of this NotificationRecipient.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale: str):
        """Sets the locale of this NotificationRecipient.

        Determined locale of the user in format of a language tag, `<language>_<COUNTRY>`, e.g. `en_GB`.  # noqa: E501

        :param locale: The locale of this NotificationRecipient.
        :type locale: str
        """

        self._locale = locale
