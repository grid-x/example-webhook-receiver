from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.appliance_event_data import ApplianceEventData
from openapi_server.models.commissioning_data import CommissioningData
from openapi_server.models.ev_event_data import EVEventData
from openapi_server.models.gateway_event_data import GatewayEventData
from openapi_server.models.inverter_event_data import InverterEventData
from openapi_server import util

from openapi_server.models.appliance_event_data import ApplianceEventData  # noqa: E501
from openapi_server.models.commissioning_data import CommissioningData  # noqa: E501
from openapi_server.models.ev_event_data import EVEventData  # noqa: E501
from openapi_server.models.gateway_event_data import GatewayEventData  # noqa: E501
from openapi_server.models.inverter_event_data import InverterEventData  # noqa: E501

class EventData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appliance_id=None, gateway_id=None, model=None, manufacturer=None, type=None, kind=None, name=None, serial_number=None, system_id=None, system_name=None, status=None, last_status=None, err_code=None, last_err_code=None, gateway_name=None, gateway_serialnumber=None, user_id=None, user_name=None, user_mail=None, evse_id=None, state=None, customer_id=None, customer_email=None, customer_address=None):  # noqa: E501
        """EventData - a model defined in OpenAPI

        :param appliance_id: The appliance_id of this EventData.  # noqa: E501
        :type appliance_id: str
        :param gateway_id: The gateway_id of this EventData.  # noqa: E501
        :type gateway_id: str
        :param model: The model of this EventData.  # noqa: E501
        :type model: str
        :param manufacturer: The manufacturer of this EventData.  # noqa: E501
        :type manufacturer: str
        :param type: The type of this EventData.  # noqa: E501
        :type type: str
        :param kind: The kind of this EventData.  # noqa: E501
        :type kind: str
        :param name: The name of this EventData.  # noqa: E501
        :type name: str
        :param serial_number: The serial_number of this EventData.  # noqa: E501
        :type serial_number: str
        :param system_id: The system_id of this EventData.  # noqa: E501
        :type system_id: str
        :param system_name: The system_name of this EventData.  # noqa: E501
        :type system_name: str
        :param status: The status of this EventData.  # noqa: E501
        :type status: str
        :param last_status: The last_status of this EventData.  # noqa: E501
        :type last_status: str
        :param err_code: The err_code of this EventData.  # noqa: E501
        :type err_code: str
        :param last_err_code: The last_err_code of this EventData.  # noqa: E501
        :type last_err_code: str
        :param gateway_name: The gateway_name of this EventData.  # noqa: E501
        :type gateway_name: str
        :param gateway_serialnumber: The gateway_serialnumber of this EventData.  # noqa: E501
        :type gateway_serialnumber: str
        :param user_id: The user_id of this EventData.  # noqa: E501
        :type user_id: str
        :param user_name: The user_name of this EventData.  # noqa: E501
        :type user_name: str
        :param user_mail: The user_mail of this EventData.  # noqa: E501
        :type user_mail: str
        :param evse_id: The evse_id of this EventData.  # noqa: E501
        :type evse_id: str
        :param state: The state of this EventData.  # noqa: E501
        :type state: str
        :param customer_id: The customer_id of this EventData.  # noqa: E501
        :type customer_id: str
        :param customer_email: The customer_email of this EventData.  # noqa: E501
        :type customer_email: str
        :param customer_address: The customer_address of this EventData.  # noqa: E501
        :type customer_address: str
        """
        self.openapi_types = {
            'appliance_id': str,
            'gateway_id': str,
            'model': str,
            'manufacturer': str,
            'type': str,
            'kind': str,
            'name': str,
            'serial_number': str,
            'system_id': str,
            'system_name': str,
            'status': str,
            'last_status': str,
            'err_code': str,
            'last_err_code': str,
            'gateway_name': str,
            'gateway_serialnumber': str,
            'user_id': str,
            'user_name': str,
            'user_mail': str,
            'evse_id': str,
            'state': str,
            'customer_id': str,
            'customer_email': str,
            'customer_address': str
        }

        self.attribute_map = {
            'appliance_id': 'applianceID',
            'gateway_id': 'gatewayID',
            'model': 'model',
            'manufacturer': 'manufacturer',
            'type': 'type',
            'kind': 'kind',
            'name': 'name',
            'serial_number': 'serialNumber',
            'system_id': 'systemID',
            'system_name': 'systemName',
            'status': 'status',
            'last_status': 'lastStatus',
            'err_code': 'errCode',
            'last_err_code': 'lastErrCode',
            'gateway_name': 'gatewayName',
            'gateway_serialnumber': 'gatewaySerialnumber',
            'user_id': 'userID',
            'user_name': 'userName',
            'user_mail': 'userMail',
            'evse_id': 'evseID',
            'state': 'state',
            'customer_id': 'customerID',
            'customer_email': 'customerEmail',
            'customer_address': 'customerAddress'
        }

        self._appliance_id = appliance_id
        self._gateway_id = gateway_id
        self._model = model
        self._manufacturer = manufacturer
        self._type = type
        self._kind = kind
        self._name = name
        self._serial_number = serial_number
        self._system_id = system_id
        self._system_name = system_name
        self._status = status
        self._last_status = last_status
        self._err_code = err_code
        self._last_err_code = last_err_code
        self._gateway_name = gateway_name
        self._gateway_serialnumber = gateway_serialnumber
        self._user_id = user_id
        self._user_name = user_name
        self._user_mail = user_mail
        self._evse_id = evse_id
        self._state = state
        self._customer_id = customer_id
        self._customer_email = customer_email
        self._customer_address = customer_address

    @classmethod
    def from_dict(cls, dikt) -> 'EventData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Event_data of this EventData.  # noqa: E501
        :rtype: EventData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appliance_id(self) -> str:
        """Gets the appliance_id of this EventData.

        ID of the appliance that caused this event.  # noqa: E501

        :return: The appliance_id of this EventData.
        :rtype: str
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id: str):
        """Sets the appliance_id of this EventData.

        ID of the appliance that caused this event.  # noqa: E501

        :param appliance_id: The appliance_id of this EventData.
        :type appliance_id: str
        """
        if appliance_id is None:
            raise ValueError("Invalid value for `appliance_id`, must not be `None`")  # noqa: E501

        self._appliance_id = appliance_id

    @property
    def gateway_id(self) -> str:
        """Gets the gateway_id of this EventData.

        The ID of the gateway that connects to the appliance.  # noqa: E501

        :return: The gateway_id of this EventData.
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id: str):
        """Sets the gateway_id of this EventData.

        The ID of the gateway that connects to the appliance.  # noqa: E501

        :param gateway_id: The gateway_id of this EventData.
        :type gateway_id: str
        """
        if gateway_id is None:
            raise ValueError("Invalid value for `gateway_id`, must not be `None`")  # noqa: E501

        self._gateway_id = gateway_id

    @property
    def model(self) -> str:
        """Gets the model of this EventData.

        Model description of the appliance.  # noqa: E501

        :return: The model of this EventData.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this EventData.

        Model description of the appliance.  # noqa: E501

        :param model: The model of this EventData.
        :type model: str
        """

        self._model = model

    @property
    def manufacturer(self) -> str:
        """Gets the manufacturer of this EventData.

        Manufacturer of the appliance.  # noqa: E501

        :return: The manufacturer of this EventData.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer: str):
        """Sets the manufacturer of this EventData.

        Manufacturer of the appliance.  # noqa: E501

        :param manufacturer: The manufacturer of this EventData.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def type(self) -> str:
        """Gets the type of this EventData.

        General type of the appliance.  # noqa: E501

        :return: The type of this EventData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this EventData.

        General type of the appliance.  # noqa: E501

        :param type: The type of this EventData.
        :type type: str
        """
        allowed_values = ["UNKNOWN", "INVERTER", "METER", "EVSTATION", "HEAT_PUMP", "HEATER", "CONTAINER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def kind(self) -> str:
        """Gets the kind of this EventData.

        Kind of the appliance is used to provide further details on the appliance configuration and mode of operation. The kind property is only available for appliances with type INVERTER or METER. For inverters, only UNKNOWN, PV, BATTERY, HYBRID and PV_EXTERNAL are valid values. They describe the  kind of connected appliance(s) and define the role of the inverter in the system. For meters, kind specifies the appliance the meter is attached to. It resembles the location the meter is installed in.   # noqa: E501

        :return: The kind of this EventData.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this EventData.

        Kind of the appliance is used to provide further details on the appliance configuration and mode of operation. The kind property is only available for appliances with type INVERTER or METER. For inverters, only UNKNOWN, PV, BATTERY, HYBRID and PV_EXTERNAL are valid values. They describe the  kind of connected appliance(s) and define the role of the inverter in the system. For meters, kind specifies the appliance the meter is attached to. It resembles the location the meter is installed in.   # noqa: E501

        :param kind: The kind of this EventData.
        :type kind: str
        """
        allowed_values = ["UNKNOWN", "PV", "BATTERY", "HYBRID", "PV_EXTERNAL", "GRID", "HEAT_PUMP", "FUEL_CELL", "HEAT_PUMP_EXTERNAL", "EVSTATION", "BTTP", "HEATING", "MISC", "CLUSTER", "WIND_TURBINE"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def name(self) -> str:
        """Gets the name of this EventData.

        The name of the appliance as defined by the customer.  # noqa: E501

        :return: The name of this EventData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this EventData.

        The name of the appliance as defined by the customer.  # noqa: E501

        :param name: The name of this EventData.
        :type name: str
        """

        self._name = name

    @property
    def serial_number(self) -> str:
        """Gets the serial_number of this EventData.

        Serial number of the appliance as returned by the appliance.  # noqa: E501

        :return: The serial_number of this EventData.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number: str):
        """Sets the serial_number of this EventData.

        Serial number of the appliance as returned by the appliance.  # noqa: E501

        :param serial_number: The serial_number of this EventData.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def system_id(self) -> str:
        """Gets the system_id of this EventData.

        The ID of the system that the gateway and appliance run in.  # noqa: E501

        :return: The system_id of this EventData.
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id: str):
        """Sets the system_id of this EventData.

        The ID of the system that the gateway and appliance run in.  # noqa: E501

        :param system_id: The system_id of this EventData.
        :type system_id: str
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")  # noqa: E501

        self._system_id = system_id

    @property
    def system_name(self) -> str:
        """Gets the system_name of this EventData.

        The name of the commissioned system.  # noqa: E501

        :return: The system_name of this EventData.
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name: str):
        """Sets the system_name of this EventData.

        The name of the commissioned system.  # noqa: E501

        :param system_name: The system_name of this EventData.
        :type system_name: str
        """

        self._system_name = system_name

    @property
    def status(self) -> str:
        """Gets the status of this EventData.

        Current (new) status of the inverter.  # noqa: E501

        :return: The status of this EventData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this EventData.

        Current (new) status of the inverter.  # noqa: E501

        :param status: The status of this EventData.
        :type status: str
        """
        allowed_values = ["UNKNOWN", "OK", "WARNING", "ERROR"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def last_status(self) -> str:
        """Gets the last_status of this EventData.

        Last status of the inverter.  # noqa: E501

        :return: The last_status of this EventData.
        :rtype: str
        """
        return self._last_status

    @last_status.setter
    def last_status(self, last_status: str):
        """Sets the last_status of this EventData.

        Last status of the inverter.  # noqa: E501

        :param last_status: The last_status of this EventData.
        :type last_status: str
        """
        allowed_values = ["UNKNOWN", "OK", "WARNING", "ERROR"]  # noqa: E501
        if last_status not in allowed_values:
            raise ValueError(
                "Invalid value for `last_status` ({0}), must be one of {1}"
                .format(last_status, allowed_values)
            )

        self._last_status = last_status

    @property
    def err_code(self) -> str:
        """Gets the err_code of this EventData.

        Current (new) error code as returned by the appliance. The value depends on the appliance manufacturer, model and firmware. Please refer to the manufacturers specification.   # noqa: E501

        :return: The err_code of this EventData.
        :rtype: str
        """
        return self._err_code

    @err_code.setter
    def err_code(self, err_code: str):
        """Sets the err_code of this EventData.

        Current (new) error code as returned by the appliance. The value depends on the appliance manufacturer, model and firmware. Please refer to the manufacturers specification.   # noqa: E501

        :param err_code: The err_code of this EventData.
        :type err_code: str
        """

        self._err_code = err_code

    @property
    def last_err_code(self) -> str:
        """Gets the last_err_code of this EventData.

        Last error code as returned by the appliance. The value depends on the appliance manufacturer, model and firmware. Please refer to the manufacturers specification.   # noqa: E501

        :return: The last_err_code of this EventData.
        :rtype: str
        """
        return self._last_err_code

    @last_err_code.setter
    def last_err_code(self, last_err_code: str):
        """Sets the last_err_code of this EventData.

        Last error code as returned by the appliance. The value depends on the appliance manufacturer, model and firmware. Please refer to the manufacturers specification.   # noqa: E501

        :param last_err_code: The last_err_code of this EventData.
        :type last_err_code: str
        """

        self._last_err_code = last_err_code

    @property
    def gateway_name(self) -> str:
        """Gets the gateway_name of this EventData.

        The name of the gateway corresponding to the gatewayID.  # noqa: E501

        :return: The gateway_name of this EventData.
        :rtype: str
        """
        return self._gateway_name

    @gateway_name.setter
    def gateway_name(self, gateway_name: str):
        """Sets the gateway_name of this EventData.

        The name of the gateway corresponding to the gatewayID.  # noqa: E501

        :param gateway_name: The gateway_name of this EventData.
        :type gateway_name: str
        """

        self._gateway_name = gateway_name

    @property
    def gateway_serialnumber(self) -> str:
        """Gets the gateway_serialnumber of this EventData.

        The serialnumber of the gateway corresponding to the commissioned system.  # noqa: E501

        :return: The gateway_serialnumber of this EventData.
        :rtype: str
        """
        return self._gateway_serialnumber

    @gateway_serialnumber.setter
    def gateway_serialnumber(self, gateway_serialnumber: str):
        """Sets the gateway_serialnumber of this EventData.

        The serialnumber of the gateway corresponding to the commissioned system.  # noqa: E501

        :param gateway_serialnumber: The gateway_serialnumber of this EventData.
        :type gateway_serialnumber: str
        """

        self._gateway_serialnumber = gateway_serialnumber

    @property
    def user_id(self) -> str:
        """Gets the user_id of this EventData.

        The ID of the user that owns the system.  # noqa: E501

        :return: The user_id of this EventData.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this EventData.

        The ID of the user that owns the system.  # noqa: E501

        :param user_id: The user_id of this EventData.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def user_name(self) -> str:
        """Gets the user_name of this EventData.

        Name of the user belonging to the userID.  # noqa: E501

        :return: The user_name of this EventData.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this EventData.

        Name of the user belonging to the userID.  # noqa: E501

        :param user_name: The user_name of this EventData.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def user_mail(self) -> str:
        """Gets the user_mail of this EventData.

        E-Mail address of the user belonging to the userID.  # noqa: E501

        :return: The user_mail of this EventData.
        :rtype: str
        """
        return self._user_mail

    @user_mail.setter
    def user_mail(self, user_mail: str):
        """Sets the user_mail of this EventData.

        E-Mail address of the user belonging to the userID.  # noqa: E501

        :param user_mail: The user_mail of this EventData.
        :type user_mail: str
        """

        self._user_mail = user_mail

    @property
    def evse_id(self) -> str:
        """Gets the evse_id of this EventData.

        Electirc Vehicle Supply Equipment ID  # noqa: E501

        :return: The evse_id of this EventData.
        :rtype: str
        """
        return self._evse_id

    @evse_id.setter
    def evse_id(self, evse_id: str):
        """Sets the evse_id of this EventData.

        Electirc Vehicle Supply Equipment ID  # noqa: E501

        :param evse_id: The evse_id of this EventData.
        :type evse_id: str
        """

        self._evse_id = evse_id

    @property
    def state(self) -> str:
        """Gets the state of this EventData.

        State of the EV charging station.  # noqa: E501

        :return: The state of this EventData.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this EventData.

        State of the EV charging station.  # noqa: E501

        :param state: The state of this EventData.
        :type state: str
        """
        allowed_values = ["plugged"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def customer_id(self) -> str:
        """Gets the customer_id of this EventData.

        The ID of the newly created customer after the commissioning process.  # noqa: E501

        :return: The customer_id of this EventData.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: str):
        """Sets the customer_id of this EventData.

        The ID of the newly created customer after the commissioning process.  # noqa: E501

        :param customer_id: The customer_id of this EventData.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def customer_email(self) -> str:
        """Gets the customer_email of this EventData.

        The email of the newly created customer after the commissioning process.  # noqa: E501

        :return: The customer_email of this EventData.
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email: str):
        """Sets the customer_email of this EventData.

        The email of the newly created customer after the commissioning process.  # noqa: E501

        :param customer_email: The customer_email of this EventData.
        :type customer_email: str
        """

        self._customer_email = customer_email

    @property
    def customer_address(self) -> str:
        """Gets the customer_address of this EventData.

        The address of the newly created customer after the commissioning process.  # noqa: E501

        :return: The customer_address of this EventData.
        :rtype: str
        """
        return self._customer_address

    @customer_address.setter
    def customer_address(self, customer_address: str):
        """Sets the customer_address of this EventData.

        The address of the newly created customer after the commissioning process.  # noqa: E501

        :param customer_address: The customer_address of this EventData.
        :type customer_address: str
        """

        self._customer_address = customer_address
