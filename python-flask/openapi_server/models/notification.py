from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.notification_message import NotificationMessage
from openapi_server.models.notification_recipient import NotificationRecipient
from openapi_server import util

from openapi_server.models.notification_message import NotificationMessage  # noqa: E501
from openapi_server.models.notification_recipient import NotificationRecipient  # noqa: E501

class Notification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recipient=None, message=None):  # noqa: E501
        """Notification - a model defined in OpenAPI

        :param recipient: The recipient of this Notification.  # noqa: E501
        :type recipient: NotificationRecipient
        :param message: The message of this Notification.  # noqa: E501
        :type message: NotificationMessage
        """
        self.openapi_types = {
            'recipient': NotificationRecipient,
            'message': NotificationMessage
        }

        self.attribute_map = {
            'recipient': 'recipient',
            'message': 'message'
        }

        self._recipient = recipient
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'Notification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Notification of this Notification.  # noqa: E501
        :rtype: Notification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recipient(self) -> NotificationRecipient:
        """Gets the recipient of this Notification.


        :return: The recipient of this Notification.
        :rtype: NotificationRecipient
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient: NotificationRecipient):
        """Sets the recipient of this Notification.


        :param recipient: The recipient of this Notification.
        :type recipient: NotificationRecipient
        """
        if recipient is None:
            raise ValueError("Invalid value for `recipient`, must not be `None`")  # noqa: E501

        self._recipient = recipient

    @property
    def message(self) -> NotificationMessage:
        """Gets the message of this Notification.


        :return: The message of this Notification.
        :rtype: NotificationMessage
        """
        return self._message

    @message.setter
    def message(self, message: NotificationMessage):
        """Sets the message of this Notification.


        :param message: The message of this Notification.
        :type message: NotificationMessage
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message
